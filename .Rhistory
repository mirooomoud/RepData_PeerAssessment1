gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class))
submit()
students4
student_info <- students4 %>%
select( id, name, sex ) %>%
print
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id, name) %>%
print
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script6.R')
submit()
gradebook <- students4 %>%
select(id, class, midterm, final) %>%
print
submit()
passed
failed
passed <- passed %>%
mutate(status = "passed")
failed<-failed%>%
+     mutate(status = "passed")
failed<-failed%>%
mutate(status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
sat %>%
select(-contains(total)) %>%
gather(column, count, -score_range) %>%
### <Your call to separate(column, c("part", "sex")> %>%
print
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script8.R')
sat %>%
select(-contains("total")) %>%
gather(column, count, -score_range) %>%
separate(column, c("part", "sex"))
print
submit()
reset()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script8.R')
sat %>%
select(-contains("total")) %>%
gather(column, count, -score_range) %>%
separate(column, c("part", "sex")) %>%
print
submit()
reset()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script8.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
### <Your call to separate(part_sex, c("part", "sex"))> %>%
print
submit()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script8.R')
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script8.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex"))
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by(part, sex)> %>%
mutate(total = sum(count), prop = count / total)
###
%>% print
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
### <Your call to group_by(part, sex)> %>%
mutate(total = sum(count), prop = count / total)
print
submit()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)> %>%
mutate(total = sum(count), prop = count / total)
print
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total)
print
submit()
reset()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total)
print
submit()
reset()
reset()
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
source('C:/Users/Mahmoud/AppData/Local/Temp/RtmpSEzDgp/script9.R')
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count),
prop = count / total)
submit()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
range(airquality$Ozone, na.rm =TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab="Ozone (ppb)", col.axis = "blue", col.lab="red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Wind in New York City")
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
?pch
(?pch)
par("pch")
par("lty")
with(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, type="n",airquality$Ozone)
title(main="Wind and Ozone in NYC")
may<-subset(airquality, Month == 5)
points(plot(may$wind, may$ozone), col="blue", pch="triangle")
points(may$wind, may$ozone, col="blue", pch="triangle")
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay<-subset(airquality, Month==!5)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=12)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend(topright, c(17,8), c("blue","red"), c("May","Other Months"))
legend("toprigh"t, c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"), legend=c("May","Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow(1,2))
par(mfrow=c(1,2))
plot( airquality$Wind, airquality$Ozone, main="Ozone and Wind")
Plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot( airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer set = TRUE)
)
mtext("Ozone and Weather in New York City", outer set=TRUE)
mtext(Ozone and Weather in New York City, outer set=TRUE)
mtext("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
get(wd)
getwd()
dev.off()
dev.cur()
dev.off(png)
dev.off(4)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(y~x, airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data=airquality, layout=c(5, 1))
xyplot(Ozone~Wind | Month, data=airquality, layout=c(5, 1))
p<-xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2, 1))
v1
v2
myedit("plot1.R")
pathtofile(plot1.R, local=TRUE)
pathtofile(plot1.R, local set=TRUE)
pathtofile(("plot1.R"),local=TRUE)
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data=diamonds, strip=FALSE, pch=20, xlab="myxlab", ylab="myylab", main="mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors, 10)
sample(colors(), 10)
pal<-colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<-colorRampPalette(c("red","blue"))
p1
pi(2)
p1(2)
p1(6)
0xcc
swirl(0)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
p2<-colorRampPalette(c("red", "yellow"))
p2
p2(2)
p2(10)
p1(20)
showMe(p1(20))
p2(20)
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3<-colorRampPalette(c("blue", "green"), alpha(0.5))
p3<-colorRampPalette(c("blue", "green"), alpha0.5)
p3<-colorRampPalette(c("blue", "green"), alpha=0.5)
p3(5)
rgb(0, 0.5, 5)
rgb(0, 0.5, 0.5)
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5, 0.3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal<-colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=(pal(20)))
image(volcano, col = pal(20))
image(volcano, col = pal1(20))
image(volcano, col = p1(20))
str(mpg)
qplot (displ, hwy, data=mpg)
qplot (displ, hwy, data=mpg, color=drv)
qplot (displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(hwy, data=mpg, color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv,)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=.~drv, binwidth=2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets=.~drv, method="loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets=.~drv, method=loess)
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets=.~drv, method = "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets=.~drv, method= "loess")
qplot(displ, hwy, data=mpg, geom = c("point", "smooth"), facets=.~drv)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth()+method="lm"
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(. ~ drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(color="pink", size=4, alpha=1/2)+aes(color=drv)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv), size=2, alpha=1/2, method="lm", se=FALSE)
g + geom_point(aes(color = drv), size=2, alpha=1/2)+geom_smooth(size=4, lty=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +
| geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) +geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3,3))
g<-ggplot(testdata, aes(x=myx, y=myy))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim=c(-3,3))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=year))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamond)
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth= 18497/30)
brk
counts
qplot(price, data=diamonds, binwidth= 18497/30, fill=cut())
qplot(price, data=diamonds, binwidth= 18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"), method="lm" )
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth", method="lm"))
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth",  method = "lm”)
)
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"),  method = "lm”)
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"), method="lm" )
qplot(carat, price, data=diamonds, color=cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"),method="lm", facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, geom=c("point","smooth"), facets = .~cut)
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-(diamonds, aes(depth, price))
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
(g+geom_point(alpha=1/3)+facet_grid(cut~car2))+geom_smooth(method="lm", size=3, color="pink")
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot+facet_grid(.~cut)
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day<-today()
this_day
year(this_day)
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1-9-2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment, hours=9, minutes=50)
this_moment
nyc<-now("America/New_York")
nyc
depart<- nyc + days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008", tz="Singapore")
last_time
?new_interval()
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
swirl()
cmat
points(cx, cy, col=c("red", "orange", "purple"), pch=3, cex=2, lwd=2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust,mean)
tapply(y, newClust,mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
apply(x, newClust2, mean)
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x, y, col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
kClust<-kmeans(sub1[ ,-c(562:563)])
kClust<-kmeans(sub1[ ,-c(562:563)], centers = 6)
table( kClust$cluster, sub1$activity)
kClust<-kmeans(sub1[ ,-c(562:563)], centers = 6, nstart = 100)
table( kClust$cluster, sub1$activity)
dim(kClust$centers)
laying<-which(kClust$size==29)
plot( kClust$centers[laying,1:12], pch=19, ylab = "Laying Cluster")
names(sub1[ ,1:3])
walkdown<-which(kClust$size==49)
plot( kClust$centers[walkdown,1:12], pch=19, ylab = "walkdown Cluster")
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames<-strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0)<- make.names(cnames[[1]][wcol])
head(pm0)
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
pm1<-make.names(cnames[[1]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sampl.Value
x1<-pm1$Sample.Value
x1<-pm1$Sample.Value
x1<-pm1[Sample.Value]
x1<-pm1[ , Sample.Value]
x1<-pm1$Sample.Value
x0<-pm0$Sample.Value
x1 <- pm1$Sample.Value
x1 <- pm1$Sample.Value
0
info()
bye()
swirl()
x1 <- pm1$Sample.Value
x1 <- pm1$Sample.Value
x1<-pm1$Sample.Value
skip()
x1 <- pm1$Sample.Value
skip()
bye()
swirl()
x1<-pm1$V5
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
x1<-pm1$Sample.Value
library(swirl)
install_from_swirl("Exploratory Data analysis")
setwd("C:/Users/Mahmoud/Desktop/ProgrammingAssignment2-master (1)")
data<-read.csv("activity.csv")
data<-read.csv("ProgrammingAssignment2-master (1)/activity.csv")
data<-read.csv("("C:/Users/Mahmoud/Desktop/ProgrammingAssignment2-master (1)/activity.csv")
data<-read.csv("C:/Users/Mahmoud/Desktop/ProgrammingAssignment2-master (1)/activity.csv")
ls
setwd("C:/Users/Mahmoud/Desktop/RepData_PeerAssessment1")
data<-read.csv("activity.csv")
data<-read.csv("C:\Users\Mahmoud\Desktop\RepData_PeerAssessment1\activity.csv")
data<-read.csv("C:/Users/Mahmoud/Desktop/RepData_PeerAssessment1/activity.csv")
data<-read.csv("activity.csv")
